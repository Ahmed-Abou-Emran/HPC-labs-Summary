// This program uses OpenMP to search a list of numbers and count how many numbers are less than or equal to 25.
// We use a parallel for loop to divide the work among the available threads,
// with each thread counting the number of elements in its assigned portion of the array.
// The results from each thread are combined using a reduction operation.

#include <iostream>
#include <omp.h>

using namespace std;

int main() {
   int count = 0;
   int n = 10000;
   int a[n];

   // Initialize the array a with random values between 0 and 50
   for (int i = 0; i < n; i++) {
      a[i] = rand() % 51;
   }

   #pragma omp parallel for reduction(+:count)
   for (int i = 0; i < n; i++) {
      if (a[i] <= 25) {
         count++;
      }
   }

   cout << "Number of elements less than or equal to 25: " << count << endl;

   return 0;
}

// Explanation:
// This program uses OpenMP to search a list of numbers and count how many numbers are less than or equal to 25.
// We first define an integer variable count to keep track of the number of elements less than or equal to 25.
// We also define an integer n to specify the size of the array a, which we initialize with random values between 0 and 50.
// We use a parallel for loop to divide the work among the available threads,
// with each thread counting the number of elements in its assigned portion of the array.
// We use the reduction clause to combine the results from each thread and store the total count in the count variable.
// Finally, we print the resulting count value.

// Explanation summary:
// This program uses OpenMP to search a list of numbers and count how many numbers are less than or equal to 25.
// We use a parallel for loop to distribute the work among the available threads,
// with each thread counting the number of elements in its assigned portion of the array.
// The reduction clause is used to combine the results from each thread and store the total count in the count variable.
// The program then prints the resulting count value.